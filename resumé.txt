def formulecomposite(f,df,a,b,n):
h=(b-a)/n
Q= 14*(f(a)+f(b)) + h*(df(a)-df(b))
for k in range(1,n):
Q+= 28*f(a+k*h)
for k in range(0,n):
Q+= 32*f(a+(k+0.5)*h)
return (h/60)*Q

df=sp.Lambda(x,sp.diff(f(x),x)) # expression symbolique de f'
a=-1
b=0
print(df)
print(df(a).evalf())
print(df(b).evalf())

# Donner les instructions nÃ©cessaires
EQ=np.abs(formulecomposite(f,df,a,b,30).evalf()-I)
print('E_Q(f)=',EQ)


def nombreintervalles(f,df,a,b,epsilon):
n=1
E=np.abs(formulecomposite(f,df,a,b,n).evalf()-I)
while E > epsilon:
n+=1
E=np.abs(formulecomposite(f,df,a,b,n).evalf()-I)
return n


NQ=[]
epsilon = (1/10)**np.arange(3,10,2)
for eps in epsilon:
NQ.append(nombreintervalles(f,df,a,b,eps))
plt.grid(True)
plt.plot(epsilon,NQ,'ro-')
plt.xlabel('epsilon ')
plt.xscale('log')
plt.ylabel('Nombre de sous intervalles')
plt.title('Nombre de sous intervalles en fonction de epsilon')

def erreurquadrature(a,b,n,k):

x=sp.symbols('x')
P=lambda x: x**k
dP=sp.Lambda(x,sp.diff(P(x),x))
I1=sp.integrate( P(x) ,(x,a,b) ).evalf()
I2=formulecomposite(P,dP,a,b,n).evalf()
Erreur=np.abs(I1-I2)
return Erreur