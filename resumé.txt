ex 1: 
1-a ) class category 
{

private ?int $id=null;
}
php bin /console doctrine:migrations:diff
php bin /console doctrine:migrations:migrate

/Créer le ficher de migration avec la commande php bin/console make :migrationLlancer la migration avec la commande php bin/console doctrine :migration :migrate


1-b ) 

Entity Manager (EM) est un gestionnaire d’entités• C’est le chef d’orchestre de l’ORM Doctrine• EM permet l’insertion, la mise à jour et la suppression des données de la base de données
2 methode :
1) La méthode persist()
2) la methode flush()





2-a) Make : entity Film
>categoryClass
>Category
>relation
>ManyToOne
2 -b ) 
[1] ORM \ OneToMany(mappedBy:’ categorys’ ,target Entity : Film :: Class)]
[2] private collections $ filmClass 
[3] ManyToOne(inversedBy : ‘categoryClass’)]
[4] private ?Category $categorys=null; 

3)

[1] Route(‘/nvFilm’, name : nvFilm)
[2] 	$film = new Film();
	$film -> set view(0);
	$form = $this -> create Form(Film Type :: class , $film);
	$form ->handleRequest($request);
if ($form -> isSubmitted && form -> isValid() 
{
	$entityManager = $this->getDoctrine()->getManager();
	$entityManager-> presist($film);
	$entityManager-> flush();
}





4-a) 
on a une erreur au niveau de la generation de la formulaire puisque on met son type de retour comme void , de plus category est une classe , il ne faut pas l’ajouter comme un attribut simple , de plus , on a pas mamet le code necessaire pour le butoon save

4-b)public function buildForm(FormBuilderInterface $builder, array $options):
{
$builder

-> add('title')
->add('description')
->->add(‘category’, EntityType ::class, [class=>category::class choice_label=> ‘name’)
->add(‘save’,submitType::class) }
;


5-a) public function ListFilms()
 {
	$films=$this->getDoctrine()->getRepository(Film:class)->findAll();
return $this->render (‘Film/index.html.twig ,array(‘films’ =$thisfilms));
} 



5-b) 
[1] #[Route(‘/showfilm/{id} , name : ‘getFilm’]
[2] $entityManager = $MR->getManager();
$film = $repo->find($id);
if (!$film) 
{
throw $this-> create NotFoundException(Film not Found’);
$film->setViews($film->getViews()+1);
$entityManager->flush();
return (mawjouda f devoir)
}


5-c) return $this->redirectToRoute(getFilm);

6)
 {% if films is not empty %}
 {% set filmMaxViews = films[0]  %}
 {% for film in films %}
   {% if film.views > filmMaxViews.views %}
       {% set filmMaxViews = film %}
    {%endif %}
{%endfor %}
<h1> le film qui a le plus nbr de vue<h1>
<h2> {{ filmMaxViews.title}}<h2>
{%else %}
       <h2> Aucun film <h2>
{%endif %}

7)
 [1] leftJoin(‘f.category’, ‘c’)
[2] where
[3] setParameter(‘id’,$id)

8) 

$films = $entityManager ->createQuery(‘select f from Film f where f.views > 100 );
$films=$query->getResult();
