def limite(X,t0,T,N):

k=0
h=T/N
while (k <N) and (np.abs(X[k+1]-X[k])>10**-3):
k=k+1
return t0+k*h

# Instructions Python
t0=0
T=72
N=180
# on pourra mettre t = np.linspace(t0, t0+T, N+1) ailleurs de la boucle
,→for
plt.figure(figsize=(20, 10))
M = [60,80,100,120,140]
plt.figure(figsize=(20,10))
for x0 in M:
X= schema(f,x0,t0,T,N)
t = np.linspace(t0, t0+T, N+1)
plt.plot(t, X, '*', label='Solution approchée (x0='+str(x0)+')')
plt.legend()


On rappelle que

b =
XY − X Y
X2 − X
2

et

a = Y − bX

import numpy as np
import matplotlib.pyplot as plt
import sympy as sp

def BaseNewton(t,i,x):
W=np.ones((len(t)))
if i==0:
return W
else:
for j in np.arange(0,i):

#utilisez (1)

W*=(t-x[j])

return W


# Code
x=np.arange(-2,3,2)
#x=[-2,0,2]
t=np.linspace(-2,2,5)
print(BaseNewton(t,0,x))
print(BaseNewton(t,1,x))
print(BaseNewton(t,2,x))

]: def diffdiv(x,y):
beta0=y[0]
beta1=(y[1]-y[0])/(x[1]-x[0])
beta2=(((y[2]-y[1])/(x[2]-x[1]))-beta1)/(x[2]-x[0])
return [beta0,beta1,beta2]



avec X =
n
∑
i=1
xi
n
, Y =
n
∑
i=1
yi
n
, XY =
n
∑
i=1
xiyi
n
et X2 =
n
∑
i=1
x
2