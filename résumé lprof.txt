# code
a=1
b=2
x0=2
epsilon=10**(-2)
iterativemethod(1,2,x0,f,epsilon)[0][-1]


import numpy as np
import matplotlib.pyplot as plt
import sympy as sp

def baseNewton(X):
w0=Polynomial([1])
w1=Polynomial([-X[0],1])
w2=Polynomial([X[0]*X[1],-(X[0]+X[1]),1])
# pour w2 on peut utiliser la multiplication de deux polynômes
w=[w0,w1,w2]
return w


def polynomeNewton(X,Beta):
p=Polynomial([0])
n=len(X)
N=baseNewton(X)
for i in np.arange(0,n):
produit=Beta[i]*N[i]
p+=produit
return p

X=[-2,-1,0]
Beta=[0.2,0.3,0.1]
p=polynomeNewton(X,Beta)
print(p) # p


f= lambda x: 1/(1+x**2)
E=abs(p(0.5)-f(0.5))
E

Y=[f(-2),f(-1),f(0)]
t=np.linspace(-2,1,100)
plt.plot(t,f(t),'b',t,p(t),'r',X,Y,'*')
plt.xlabel('axe des abscisses')
plt.ylabel('axe des ordonnées')
plt.legend(('f','P','points d'interpolation'))

def formulecomposite(f,df,a,b,n):
h=(b-a)/n
Q= 14*(f(a)+f(b)) + h*(df(a)-df(b))
for k in range(1,n):
Q+= 28*f(a+k*h)
for k in range(0,n):
Q+= 32*f(a+(k+0.5)*h)
return (h/60)*Q